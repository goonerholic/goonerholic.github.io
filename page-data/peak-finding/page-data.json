{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/peak-finding","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tag\": [\"algorithm\", \"peak-finding\", \"mit-6.006\"],\n  \"title\": \"MIT-6.006 Intoduction to Algorithms - Lecture1(Peak finding)\",\n  \"slug\": \"peak-finding\",\n  \"date\": \"2021-03-01T15:00:00.000Z\",\n  \"excerpt\": \"MIT 6.006 Introduction to Algorithms Lecture 1 - Peak finding\",\n  \"image\": \"../images/6-006f11.jpg\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"MIT 6.006 Introductions to Algorithms\")), mdx(\"h1\", null, \"Lecture 1: Peak Finding\"), mdx(\"h2\", null, \"One-dimensional Version\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Definition of a peak\"), \": Given array \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \", index \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A[n]\"), \" is a peak \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"if\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"only if\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A[n] > A[n - 1]\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A[n] > A[n + 1]\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Problem\"), \": Find a peak \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"if it exists\")), mdx(\"h3\", null, \"Straightforward Algorithm\"), mdx(\"p\", null, \"Start from left to the end, find the peak by definition.\"), mdx(\"p\", null, \"In worst case, runtime complexity would be \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\u03B8(n).\")), mdx(\"h3\", null, \"Better Idea\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Divide and Conquer\")), mdx(\"p\", null, \"Given an array \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"a = [1, 2, ..., n / 2 - 1, n / 2, n / 2 + 1, ..., n - 1, n]\\n\")), mdx(\"p\", null, \"Look at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n / 2\"), \" position:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"if a[n / 2] < a[n / 2 - 1]:\\n    // only look at left half to look for a peak\\n    [1, ..., n / 2 - 1]\\nelse if a[n / 2] < a[n / 2 + 1]:\\n    // only look at right half to look for a peak\\n    [n / 2 + 1, ..., n]\\nelse:\\n    a[n / 2] is a peak\\n\")), mdx(\"h3\", null, \"What is the complexity?\"), mdx(\"p\", null, \"if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"T(n)\"), \" denotes work required to solve problem with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n\"), \" elements,\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"T(n) = T(n / 2) + \\u03B8(1) = \\u03B8(1) * lb(n) = \\u03B8(lb(n))\\n\")), mdx(\"p\", null, \"*T: The amount of work to solve the problem\\n**lb: Binary logarithm\"), mdx(\"h2\", null, \"Two-dimensional Version\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Definition\"), \": Given two-dimensional array \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \" which has \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n\"), \" rows and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"m\"), \" columns, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A[i][j]\"), \" is a peak, if,\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"A[i][j] >= A[i][j - 1] and\\nA[i][j] >= A[i][j + 1] and\\nA[i][j] >= A[i - 1][j] and\\nA[i][j] >= A[i + 1][j]\\n\")), mdx(\"h3\", null, \"Attemp #1: Extend 1-D Divide and Conquer to 2-D\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"first, pick middle column \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"j = m / 2\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"And then, find a 1-D peak at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"(i, j)\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"(i, j)\"), \" as a start point on row \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"i\"), \" to find 1-D peak on row \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"i\"), \".\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"But it's not working!.\"), \" 2-D peak may not exist on row \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i\"), \".\"), mdx(\"h3\", null, \"Attemp #2\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pick middle column \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"j = m / 2\"), \".(Again)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Find global maximum on column \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"j\"), \" at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"(i, j)\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Compare \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"(i, j - 1)\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"(i, j)\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"(i, j + 1)\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pick left columns of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"(i, j - 1)\"), \" > \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"(i, j)\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Similary for right.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"(i, j)\"), \" is a 2-D peak if neither condition holds.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Solve the new problem with half the number of columns.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When you have a single column, find global maximum and you are done.\")), mdx(\"h3\", null, \"Complexity of Attemp #2\"), mdx(\"p\", null, \"if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"T(n, n)\"), \" denotes work required to solve problem with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n\"), \" rows and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"m\"), \" columns:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"T(n, m) = T(n, m / 2) + \\u03B8(n)\\n        = \\u03B8(n) + ... + \\u03B8(n)\\n        = \\u03B8(nlog(m)) = \\u03B8(nlog(n)) if m = n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"date":"2021-03-01T15:00:00.000Z","excerpt":"MIT 6.006 Introduction to Algorithms Lecture 1 - Peak finding","slug":"peak-finding","title":"MIT-6.006 Intoduction to Algorithms - Lecture1(Peak finding)"}}},"pageContext":{"id":"e05c7b9a-d07a-5b9c-9cbb-b0a616411eb4"}},"staticQueryHashes":["3159585216","63159454"]}